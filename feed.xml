<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://junsukha.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://junsukha.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-09T21:20:51+00:00</updated><id>https://junsukha.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">What is ai</title><link href="https://junsukha.github.io/blog/2024/What-is-AI/" rel="alternate" type="text/html" title="What is ai"/><published>2024-03-03T00:00:00+00:00</published><updated>2024-03-03T00:00:00+00:00</updated><id>https://junsukha.github.io/blog/2024/What%20is%20AI</id><content type="html" xml:base="https://junsukha.github.io/blog/2024/What-is-AI/"><![CDATA[<hr/> <p>layout: post title: Tips date: 2024-01-19 16:00 description: Is AI really useful? tags: categories: learning featured: false —</p> <p><a href="https://n.news.naver.com/mnews/article/028/0002679323">Korean article</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[layout: post title: Tips date: 2024-01-19 16:00 description: Is AI really useful? tags: categories: learning featured: false —]]></summary></entry><entry><title type="html">c++</title><link href="https://junsukha.github.io/blog/2024/c++/" rel="alternate" type="text/html" title="c++"/><published>2024-01-19T16:00:00+00:00</published><updated>2024-01-19T16:00:00+00:00</updated><id>https://junsukha.github.io/blog/2024/c++</id><content type="html" xml:base="https://junsukha.github.io/blog/2024/c++/"><![CDATA[<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="k">class</span> <span class="nc">GfG</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
    <span class="n">GfG</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">x</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// static member function</span>
    <span class="c1">// static void printMsg() { cout &lt;&lt; "Welcome to GfG!" &lt;&lt; x; }</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">GfG</span><span class="o">::</span><span class="n">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// just like static member function</span>
 
<span class="c1">// main function</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">GfG</span> <span class="n">obj1</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">obj1</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">obj1</span><span class="p">.</span><span class="n">x</span><span class="o">++</span><span class="p">;</span>
    <span class="n">GfG</span> <span class="n">obj2</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">obj2</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

    <span class="c1">// invoking a static member function</span>
    <span class="c1">// GfG::printMsg();</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning"/><summary type="html"><![CDATA[about c++]]></summary></entry><entry><title type="html">Tips</title><link href="https://junsukha.github.io/blog/2024/learning/" rel="alternate" type="text/html" title="Tips"/><published>2024-01-19T16:00:00+00:00</published><updated>2024-01-19T16:00:00+00:00</updated><id>https://junsukha.github.io/blog/2024/learning</id><content type="html" xml:base="https://junsukha.github.io/blog/2024/learning/"><![CDATA[<h1 id="git--github">Git / Github</h1> <h2 id="__init__py-usage"><code class="language-plaintext highlighter-rouge">__init__.py</code> Usage</h2> <p>https://mmjourney.tistory.com/14</p> <hr/> <h2 id="pip-install-git-pacakage">pip install, git+, pacakage</h2> <p>Terms explanation:<br/> Package - A folder/directory that contains <strong>init</strong>.py file.<br/> Module - A valid python file with .py extension.<br/> Distribution - How one package relates to other packages and modules.</p> <p><a href="https://minimin2.tistory.com/189">[Python] github 저장소를 pip install 설치가 가능하도록 만드는 방법</a></p> <h2 id="from--import">from &amp; import</h2> <p><a href="https://mmjourney.tistory.com/14">link</a><br/> Why and how to use <code class="language-plaintext highlighter-rouge">__init__.py</code></p> <p><a href="https://kevinitcoding.tistory.com/entry/%EA%B8%B0%EC%B4%88-%ED%8C%8C%EC%9D%B4%EC%8D%ACPython-from%EA%B3%BC-import%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%97%90-%EB%8C%80%ED%95%B4-%EB%B0%B0%EC%9B%8C%EB%B3%B4%EC%9E%90#:~:text=from%EC%9D%80%20%EB%B3%B4%ED%86%B5%20%EB%AA%A8%EB%93%88%20%EC%95%88%EC%9D%98,%27%EB%9D%BC%EB%8A%94%20%EC%9D%98%EB%AF%B8%EC%9E%85%EB%8B%88%EB%8B%A4.">link</a> <code class="language-plaintext highlighter-rouge">from &lt;module(file) path&gt; import &lt;function or class&gt;</code></p> <hr/> <h2 id="undo">Undo</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset HEAD~1
git reset <span class="nt">--hard</span> HEAD~1
git reset &lt;specific commit <span class="nb">hash</span><span class="o">&gt;</span>
git reset <span class="nt">--hard</span> &lt;specific commit <span class="nb">hash</span><span class="o">&gt;</span>
</code></pre></div></div> <p>Without <code class="language-plaintext highlighter-rouge">--hard</code>, only undo commits, i.e, leave updates in the files.<br/> With <code class="language-plaintext highlighter-rouge">--hard</code>, delete the updates as well.<br/> HEAD is a pointer.</p> <h2 id="two-ways-of-merging-not-two-ways-way-1-is-when-i-want-to-merge-my-branch-to-main-branch-and-way-2-is-when-i-want-to-merge-main-branch-to-my-branch-to-update-any-changes-made-in-main-branch">Two ways of merging. Not two ways. Way 1 is when I want to merge my branch to main branch, and Way 2 is when I want to merge main branch to my branch to update any changes made in main branch.</h2> <p><a href="https://www.youtube.com/watch?v=RGOj5yH7evk">link</a></p> <ol> <li> <p>You can manually merge on Github UI. Run <code class="language-plaintext highlighter-rouge">git push</code> from a branch that you want to merge to a <code class="language-plaintext highlighter-rouge">main</code> branch. Then work on conflict,merge,etc on Github UI. Note that <code class="language-plaintext highlighter-rouge">git push</code> is not pull request. You just push your new branch to remote git repo (Github). You have to manually click <code class="language-plaintext highlighter-rouge">Compare &amp; pull request</code> on Github.<br/> This process is happening on remote repo. To make the update effective on local repo, you should do something like <code class="language-plaintext highlighter-rouge">git pull</code>.</p> </li> <li> <p>Use <code class="language-plaintext highlighter-rouge">git merge</code> You need to take care of conflict stuff on Vscode. After merging, you should do something like <code class="language-plaintext highlighter-rouge">git push</code> in a <code class="language-plaintext highlighter-rouge">main</code> branch, for example, if you merged another branch to <code class="language-plaintext highlighter-rouge">main</code> to make remote repo effective on the updates made in local repo.</p> </li> </ol> <p><code class="language-plaintext highlighter-rouge">git switch feature-branch</code>에서 <code class="language-plaintext highlighter-rouge">git merge main</code> 을 하는건 <code class="language-plaintext highlighter-rouge">main</code>의 updates를 내 <code class="language-plaintext highlighter-rouge">feature-branch</code>에 반영하기 위해서임.<br/> <code class="language-plaintext highlighter-rouge">git switch main</code>에서 <code class="language-plaintext highlighter-rouge">git merge feature-branch</code>하는건 내 <code class="language-plaintext highlighter-rouge">feature-branch</code>를 <code class="language-plaintext highlighter-rouge">main</code>에다가, i.e. <code class="language-plaintext highlighter-rouge">main &lt;- feature-branch</code> merge 하기 위함. 하지만 main 이 default branch인 경우, <code class="language-plaintext highlighter-rouge">feature-branch</code>와 <code class="language-plaintext highlighter-rouge">main</code> 사이에 confict이 있다면, 즉, <code class="language-plaintext highlighter-rouge">feature-branch</code>를 작업하는 동안 누군가 <code class="language-plaintext highlighter-rouge">main</code>에 updates을 했다면, <code class="language-plaintext highlighter-rouge">feature-branch</code>에서 conflict되는 부분을 해결한후에야 (예를 들어 <code class="language-plaintext highlighter-rouge">main</code> updates내용과 기존 <code class="language-plaintext highlighter-rouge">feature-branch</code> 내용 모두 살린 후) merge할 수 있다. 그래서 <code class="language-plaintext highlighter-rouge">feature-branch</code>를 git push 한 후 Github에서 pull request 할 때 conflict가 있으면 수정해야되는데 그때 예를 들어 두 branch 내용 모두 살리는 식으로 수정하면 모든 내용이 feature-branch에 덮어씌워지게 된다. 그래야 conflict가 해결돼서 <code class="language-plaintext highlighter-rouge">main</code>으로 merge할 수 있으니까.</p> <p>그래서 정리하자면, <code class="language-plaintext highlighter-rouge">feature-branch</code>에서 작업시작할 땐 항상 <code class="language-plaintext highlighter-rouge">git merge</code> 써서 <code class="language-plaintext highlighter-rouge">main</code>에서 update된 내용을 가져올 것 (다만 <code class="language-plaintext highlighter-rouge">git pull</code>을 써야되는 경우도 있다. 언제? 동일한 branch에서 작업할 때). <code class="language-plaintext highlighter-rouge">main</code> -&gt; <code class="language-plaintext highlighter-rouge">feature-branch</code>.<br/> 작업이후에 <code class="language-plaintext highlighter-rouge">main</code>으로 merge 신청을 할 땐 <code class="language-plaintext highlighter-rouge">git push</code> 한후 Github UI에서 pull request 신청. 이 때 conflict 안나게 미리 앞 단계 (<code class="language-plaintext highlighter-rouge">git merge</code>)가 필요한 것.</p> <h2 id="difference-between-git-commit--am-and-git-commit--m">Difference between <code class="language-plaintext highlighter-rouge">git commit -am</code> and <code class="language-plaintext highlighter-rouge">git commit -m</code></h2> <p><a href="https://youtu.be/RGOj5yH7evk?si=pQcaaxHpK3Ce0Rfs&amp;t=3066">link</a><br/> To use <code class="language-plaintext highlighter-rouge">git commit -am &lt;file&gt;</code>, file should have already been added. I.e., this command works for the files that are modified, not newly created.<br/> To use <code class="language-plaintext highlighter-rouge">git commit -am</code>, you should do <code class="language-plaintext highlighter-rouge">git add &lt;file&gt;</code> beforehand to make the file staged. Otherwise, <code class="language-plaintext highlighter-rouge">git</code> doesn’t know whether the file exists or not.<br/> <code class="language-plaintext highlighter-rouge">git commit -am</code> 에서 <code class="language-plaintext highlighter-rouge">a</code>는 file의 change를 stage하기 위해서 add 하는거고 (file에 change가 있으면 이 때도 결국 <code class="language-plaintext highlighter-rouge">gid add &lt;file&gt;</code>한 후에 <code class="language-plaintext highlighter-rouge">git commit -m</code> 해야됨) ,</p> <h2 id="git-branch-output-issue">git branch output issue</h2> <p><a href="https://stackoverflow.com/questions/68413744/my-integrated-vscode-terminal-zsh-opens-git-cli-when-i-type-in-git-branch">link</a></p> <p><code class="language-plaintext highlighter-rouge">git config --global pager.branch false</code></p> <hr/> <h2 id="jupyter-notebook-permission-denied-docker">jupyter notebook, permission denied, docker</h2> <p><a href="https://github.com/jupyter/docker-stacks/issues/1187">link</a></p> <hr/> <h2 id="clone-a-repo-from-someone-elses-github-and-push-it-to-a-repo-on-my-github">Clone a repo from someone else’s Github and push it to a repo on my Github</h2> <p><a href="https://stackoverflow.com/questions/18200248/cloning-a-repo-from-someone-elses-github-and-pushing-it-to-a-repo-on-my-github/44076938#44076938">link1</a></p> <p><a href="https://www.studytonight.com/git-guide/git-origin-master">link2</a></p> <ul> <li> <p><code class="language-plaintext highlighter-rouge">git remote add origin &lt;remote repo address&gt;</code> : origin이란 이름의 <code class="language-plaintext highlighter-rouge">&lt;remote repo address&gt;</code> 나타내는 remote을 새로 만듬<br/> <code class="language-plaintext highlighter-rouge">error: remote origin already exists</code> : git clone 하면 remote이름이 default로 origin이라서 이미 있는듯</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">git remote -v</code><br/> <code class="language-plaintext highlighter-rouge">origin &lt;...&gt; (fetch)</code><br/> <code class="language-plaintext highlighter-rouge">origin &lt;...&gt; (push)</code></p> </li> <li><code class="language-plaintext highlighter-rouge">git remote rename origin upstream</code> : 기존의 origin을 upstream으로 이름 바꿈</li> <li><code class="language-plaintext highlighter-rouge">git remote add origin &lt;repo on github&gt;</code> : 여기의 origin은 github에서 새로만든 repo를 나타냄 <code class="language-plaintext highlighter-rouge">&lt;repo on github&gt;</code> 은 내 github에서 new repo 만든거</li> </ul> <p>(위 두 단계 기존의 origin을 upstream 으로 바꾸고 다시 새로운 origin을 내 new repo on my Github으로 바꾸는 거임.<br/> 이 방법 대신에 <br/> <code class="language-plaintext highlighter-rouge">git remote set-url orign &lt;repo on my Github&gt;</code> 을 써서 upstream을 만드는 대신에 origin이 가리키고 있는 remote repo 주소를 바꿈)</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git remote <span class="c"># returns remote repos currently connected to current local repo</span>
origin
upstream
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">git checkout -b origin</code> : create a branch “origin” (branch “main”은 이미 있던듯) <br/> 따라서 현재 local repo에 branch가 “origin”, “main” 두 개</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git branch <span class="c"># I believe this returns branches in local repo</span>
main
<span class="k">*</span> origin
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">git checkout main</code></li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git branch
<span class="k">*</span> main
origin
</code></pre></div></div> <p>Note. <code class="language-plaintext highlighter-rouge">Your branch is up to date with 'origin/main'</code> : 여기서 ‘origin/main’은 remote tracking branch 인데<br/> 결국 <code class="language-plaintext highlighter-rouge">origin</code> denotes remote URL and master denote the remote branch it is tracking. 즉 저 메세지는 remote repo의 origin/master과 local repo의 main branch가 sync 돼있다는 말.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/origin-master-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/origin-master-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/origin-master-1400.webp"/> <img src="/assets/img/origin-master.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="git-checkout--b-branch_name-vs-git-branch-branch_name"><code class="language-plaintext highlighter-rouge">git checkout -b &lt;branch_name&gt;</code> vs <code class="language-plaintext highlighter-rouge">git branch &lt;branch_name&gt;</code></h2> <p><code class="language-plaintext highlighter-rouge">git checkout -b &lt;branch_name&gt;</code>: creates a new branch and checks out (switch to) the new branch <code class="language-plaintext highlighter-rouge">git branch &lt;branch_name&gt;</code>: creates a new branch but leaves you on the same branch <code class="language-plaintext highlighter-rouge">git checkout &lt;branch_name&gt;</code>: check out (switches to) a new branch (copy from remote)</p> <p>Note that if you were on master branch and run git branch new_branch, both master and new_branch now point to the same commit.</p> <p>There are more: <code class="language-plaintext highlighter-rouge">git switch -c new_branch</code>, <code class="language-plaintext highlighter-rouge">git switch</code>, etc</p> <hr/> <h2 id="cloning-a-repo-from-someone-elses-github-and-pushing-it-to-a-repo-on-my-github">Cloning a repo from someone else’s Github and pushing it to a repo on my Github</h2> <p>https://stackoverflow.com/questions/18200248/cloning-a-repo-from-someone-elses-github-and-pushing-it-to-a-repo-on-my-github</p> <ol> <li>Create a new repository at http://github.com (don’t initialize README, .gitignore, license)</li> <li>Clone a repo of someone else’s to my local machine<br/> git clone</li> </ol> <p>There’s also a way of using fork.<br/> Both methods can be used to update original github repo from my local repo. But fork can be used to pull request my change when I don’t have authority to update a repo</p> <h2 id="indicate-message-of-title-and-description-for-each-commit-you-make">Indicate message of title and description for each commit you make</h2> <p><code class="language-plaintext highlighter-rouge">git commit -m "title" -m "Descripton</code></p> <p>commit isn’t alive on Github unless you do <code class="language-plaintext highlighter-rouge">git push</code>.</p> <hr/> <h2 id="local-machine에서-폴더-만든-후-git-push-하기">local machine에서 폴더 만든 후 git push 하기</h2> <ol> <li>local machine에서 폴더를 만든 후 작업을 한다.</li> <li>해달 디렉토리에서 <code class="language-plaintext highlighter-rouge">git init</code> 실행한다.</li> <li>Github에서 새 repository를 생성한다.</li> <li>터니멀에서 <code class="language-plaintext highlighter-rouge">git remote add origin &lt;ssh 주소&gt;</code> 실행한다. <code class="language-plaintext highlighter-rouge">&lt;ssh 주소&gt;</code> 는 3 에서 만든 repo의 ssh 주소.</li> <li><code class="language-plaintext highlighter-rouge">git remote -v</code>실행해서 현재의 local repo 에 연결된 remote repositories 목록을 확인한다.</li> <li><code class="language-plaintext highlighter-rouge">git push origin master</code> 실행한다. <code class="language-plaintext highlighter-rouge">origin master</code>를 생략하고 싶으면 <code class="language-plaintext highlighter-rouge">git push -u origin master</code>를 실행해서 upstream을 설정한다. 즉 default로 어디로 push 하고싶은지 설정한다.</li> </ol> <hr/> <h2 id="git-commands">Git Commands</h2> <p><code class="language-plaintext highlighter-rouge">git init</code> basically means to turn a current directory into a git repository (in a local machine).</p> <hr/> <h1 id="vim-text-editor">vim text editor</h1> <h3 id="modes">Modes</h3> <p>normal mode (first screen I see after running the editor), insert mode (by hitting <code class="language-plaintext highlighter-rouge">i</code>), visual mode (by hitting <code class="language-plaintext highlighter-rouge">v</code>)</p> <h3 id="move-cursor-left-right-as-a-word">Move cursor left right as a word</h3> <p>shift + left right arrow</p> <h3 id="display-line-number">Display line number</h3> <p><code class="language-plaintext highlighter-rouge">:set number</code></p> <h3 id="move-without-arrow-keys">Move without arrow keys</h3> <p>In normal mode j : down<br/> k : up<br/> h : left<br/> l : right</p> <p>shift+left,right : move to start and end of a line</p> <h3 id="delete">Delete</h3> <p>In normal mode, use <code class="language-plaintext highlighter-rouge">x</code> (delete a character) or <code class="language-plaintext highlighter-rouge">dd</code> (delete a line)</p> <p>To delete a block, <code class="language-plaintext highlighter-rouge">v</code> + select a block + <code class="language-plaintext highlighter-rouge">d</code></p> <h3 id="undo--redo">Undo / Redo</h3> <p>In normal mode, hit <code class="language-plaintext highlighter-rouge">u</code> for undo.<br/> <code class="language-plaintext highlighter-rouge">ctrl + r</code> for redo.</p> <h3 id="show-line-numbers">Show line numbers</h3> <p><code class="language-plaintext highlighter-rouge">:set number</code></p> <h3 id="move-to-a-line">Move to a line</h3> <p><code class="language-plaintext highlighter-rouge">:2</code> : go to line number 2</p> <h3 id="copy-and-paste">Copy and Paste</h3> <p>Go to visual mode by hitting <code class="language-plaintext highlighter-rouge">v</code>.<br/> Press <code class="language-plaintext highlighter-rouge">y</code> to copy, <code class="language-plaintext highlighter-rouge">d</code> to cut.<br/> Press <code class="language-plaintext highlighter-rouge">p</code> to paste</p> <p>Notice. If <code class="language-plaintext highlighter-rouge">vim --version</code> says <code class="language-plaintext highlighter-rouge">-clipboard</code>, run <code class="language-plaintext highlighter-rouge">sudo apt-get install vim-gtk3 -y</code> to use mouse drag, cmd+c, cmd+v for copy and paste.</p> <h3 id="use-a-mouse-to-locate-a-cursor">Use a mouse to locate a cursor</h3> <p><a href="https://tuxthink.blogspot.com/2013/01/enabling-mouse-in-vi-editor-in-linux.html">link</a><br/> Run <code class="language-plaintext highlighter-rouge">sudo vi /etc/vim/vimrc</code> and uncomment <code class="language-plaintext highlighter-rouge">set mouse=a</code> (delete <code class="language-plaintext highlighter-rouge">"</code> at the front). We need <code class="language-plaintext highlighter-rouge">sudo</code> because <code class="language-plaintext highlighter-rouge">vimrc</code> is a read-only file.</p> <hr/> <h1 id="docker">Docker</h1> <h2 id="about-user-and-group-in-a-container">About user and group in a container</h2> <p>If run a container without adding user,<br/> <code class="language-plaintext highlighter-rouge">echo $UID</code> in a container shell returns 0. (It’s 1001 in host PC)</p> <p><a href="https://stackoverflow.com/questions/74059676/is-it-recommended-to-use-sudo-inside-a-docker-container">link</a><br/> In the context of a Dockerfile, you can use a USER directive as often as you need to switch users.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM some-base-image-with-a-non-root-user

USER root
RUN apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> ...
USER nonroot
</code></pre></div></div> <h2 id="add-a-user-and-group">Add a user and group</h2> <p><a href="https://code.visualstudio.com/remote/advancedcontainers/add-nonroot-user#_creating-a-nonroot-user">link</a></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ARG <span class="nv">USERNAME</span><span class="o">=</span>user-name-goes-here
ARG <span class="nv">USER_UID</span><span class="o">=</span>1000
ARG <span class="nv">USER_GID</span><span class="o">=</span><span class="nv">$USER_UID</span>

<span class="c"># Create the user</span>
RUN groupadd <span class="nt">--gid</span> <span class="nv">$USER_GID</span> <span class="nv">$USERNAME</span> <span class="se">\</span>
    <span class="o">&amp;&amp;</span> useradd <span class="nt">--uid</span> <span class="nv">$USER_UID</span> <span class="nt">--gid</span> <span class="nv">$USER_GID</span> <span class="nt">-m</span> <span class="nv">$USERNAME</span> <span class="se">\</span>
    <span class="c">#</span>
    <span class="c"># [Optional] Add sudo support. Omit if you don't need to install software after connecting.</span>
    <span class="o">&amp;&amp;</span> apt-get update <span class="se">\</span>
    <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nb">sudo</span> <span class="se">\</span>
    <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="nv">$USERNAME</span> <span class="nv">ALL</span><span class="o">=</span><span class="se">\(</span>root<span class="se">\)</span> NOPASSWD:ALL <span class="o">&gt;</span> /etc/sudoers.d/<span class="nv">$USERNAME</span> <span class="se">\</span>
    <span class="o">&amp;&amp;</span> <span class="nb">chmod </span>0440 /etc/sudoers.d/<span class="nv">$USERNAME</span>

<span class="c"># ********************************************************</span>
<span class="c"># * Anything else you want to do like clean up goes here *</span>
<span class="c"># ********************************************************</span>

<span class="c"># [Optional] Set the default user. Omit if you want to keep the default as root.</span>
USER <span class="nv">$USERNAME</span>
</code></pre></div></div> <p><a href="https://gzupark.dev/blog/A-guide-to-make-the-reproducible-environment-using-the-Docker-for-deep-learning-researcher/#dockerfile-%EA%B3%B5%EC%9C%A0%ED%95%98%EA%B8%B0">link</a></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ARG <span class="nv">UID</span><span class="o">=</span>
ARG <span class="nv">USER_NAME</span><span class="o">=</span>

<span class="c"># Recommended to use useradd not adduser</span>
RUN adduser <span class="nv">$USER_NAME</span> <span class="nt">-u</span> <span class="nv">$UID</span> <span class="nt">--quiet</span> <span class="nt">--gecos</span> <span class="s2">""</span> <span class="nt">--disabled-password</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$USER_NAME</span><span class="s2"> ALL=(root) NOPASSWD:ALL"</span> <span class="o">&gt;</span> /etc/sudoers.d/<span class="nv">$USER_NAME</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
    <span class="nb">chmod </span>0440 /etc/sudoers.d/<span class="nv">$USER_NAME</span>
</code></pre></div></div> <h2 id="why-run-a-docker-container-as-a-non-root-user">Why run a docker container as a non-root user</h2> <p><a href="https://medium.com/redbubble/running-a-docker-container-as-a-non-root-user-7d2e00f8ee15">Running a Docker container as a non-root user </a></p> <p><a href="https://effectivesquid.tistory.com/entry/Docker-Container%EB%A5%BC-root%EA%B0%80-%EC%95%84%EB%8B%8C-%EC%9D%BC%EB%B0%98-%EC%9C%A0%EC%A0%80%EB%A1%9C-%EC%8B%A4%ED%96%89%EC%8B%9C%ED%82%A4%EB%8A%94-%EB%B2%95">Docker Container를 root가 아닌 일반 유저로 실행시키는 법</a></p> <p><a href="https://medium.com/@mccode/understanding-how-uid-and-gid-work-in-docker-containers-c37a01d01cf">Understanding how uid and gid work in Docker containers</a></p> <hr/> <h2 id="just-a-note">Just a note</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#ENV PATH /usr/local/envs/$CONDA_ENV_NAME/bin:$PATH</span>
base                     /usr/local
dfm                      /usr/local/envs/dfm

vs

                         /usr/local
base                     /usr/local/envs/dfm
</code></pre></div></div> <hr/> <h2 id="pytorch-docker-file">Pytorch docker file</h2> <p><a href="https://gist.github.com/GzuPark/b89344cb93320e395ec357bc711a8799#file-pytorch-dockerfile">link</a></p> <hr/> <h2 id="nvidia-docker-is-deprecated">nvidia-docker is deprecated</h2> <p>To check whether nvidia containter toolkit is installed, use <code class="language-plaintext highlighter-rouge">nvidia-ctk --version</code></p> <hr/> <h1 id="cuda-programming">CUDA Programming</h1> <p>cuda설치해서 pytorch를 쓰는데 이 말은 pytorch써서 코드를 쓰면 그걸 gpu를 사용하게 해주는 cuda programming이 있다는 얘기. 즉 cuda programming 한다는말은 내가 쓴 코드가 gpu를 쓰게끔 한다는 말.</p> <p><a href="https://www.linkedin.com/pulse/complete-introduction-gpu-programming-practical-examples-levinas/">link</a> This link well explains about the relations between CUDA,PyCUDA, C++, etc.</p> <blockquote> <p>“CUDA programming model allows software engineers to use a CUDA-enabled GPUs for general purpose processing in C/C++ and Fortran, with third party wrappers also available for Python, Java, R, and several other programming languages.”</p> </blockquote> <p>Here, thire party wrappers include PyCUDA. I.e., C++는 third party 없이 바로 가능하고, Python의 경우 PyCUDA를 써야된다?</p> <blockquote> <p>“Compute Unified Device Architecture (CUDA) is a parallel computing platform and application programming interface (API) created by Nvidia in 2006, that gives direct access to the GPU’s virtual instruction set for the execution of compute kernels.”</p> </blockquote> <p>API는 functions 등이 갖춰져있는 interface이고 kernel은 함수 정도로 이해.</p> <h1 id="pytorch">Pytorch</h1> <h2 id="pretty-print">pretty print</h2> <p><code class="language-plaintext highlighter-rouge">from pprint import pprint</code></p> <p><code class="language-plaintext highlighter-rouge">pprint</code></p> <hr/> <h2 id="generator">generator</h2> <p><a href="https://www.learnpytorch.io/01_pytorch_workflow/#4-making-predictions-with-a-trained-pytorch-model-inference">link</a></p> <p><code class="language-plaintext highlighter-rouge">model_1.parameters()</code></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>list(model_1.parameters())
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for p in model_1.parameters():
  print(p)
</code></pre></div></div> <p><a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python">link2</a></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def nextSquare():
    i = 1
 
    # An Infinite loop to generate squares
    while True:
        yield i*i
        i += 1
        if i &gt; 10:
          break
        
for num in nextSquare():
  print(num)
</code></pre></div></div> <h1 id="ccv-oscar">CCV (Oscar)</h1> <h2 id="complaining-about-cuda">Complaining about CUDA</h2> <p>Dont forget to load cuda <code class="language-plaintext highlighter-rouge">module load cuda/x.x</code></p> <hr/> <h2 id="choose-a-specific-gpu">Choose a specific gpu</h2> <p><a href="https://docs.ccv.brown.edu/oscar/system-overview">link</a> Use the names of gpu at the bottom of the page</p> <p>For ex,</p> <p><code class="language-plaintext highlighter-rouge">interact -q gpu -f geforce3090 -g 1 -m 40g -n 4 -t 1:00:00</code></p> <h1 id="vscode">VScode</h1> <h2 id="diable-auto-activate-virtual-environment-on-vscode">diable auto activate virtual environment on vscode</h2> <p><a href="https://stackoverflow.com/questions/54802148/prevent-visual-studio-code-from-activating-the-python-virtual-environment">link</a><br/> Check out the second answer.</p> <p><code class="language-plaintext highlighter-rouge">cmd + shift + p</code> -&gt; json ssh setting (because I want to change vscode setting of sshed machine)<br/> -&gt; type the following</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "terminal.integrated.defaultProfile.linux": "bash", # this is for default terminal
    "python.terminal.activateEnvironment": false,
}
</code></pre></div></div> <h1 id="linux">Linux</h1> <h2 id="nvidia-cuda-toolkit-multiple-versions">nvidia cuda toolkit multiple versions</h2> <p>Shouldn’t just install deb files. Also, follow specfic instructions installing .run local files.<br/> <a href="https://towardsdatascience.com/managing-multiple-cuda-versions-on-a-single-machine-a-comprehensive-guide-97db1b22acdc">link</a></p> <p>This also covers this topic.<br/> <a href="https://wiki.cs.umd.edu/gamma/view/Installing_multiple_versions_of_cuda_in_a_machine">link</a></p> <hr/> <h2 id="installing-nvidia-driver">Installing nvidia driver</h2> <p><a href="https://www.linuxcapable.com/install-nvidia-drivers-on-ubuntu-linux/">link</a></p> <p>(This process is called “Install NVIDIA Drivers with Ubuntu Repository using CLI”)<br/> <code class="language-plaintext highlighter-rouge">sudo apt autoremove nvidia* --purge</code><br/> <code class="language-plaintext highlighter-rouge">sudo apt update</code><br/> <code class="language-plaintext highlighter-rouge">sudo apt upgrade</code> &lt;- I don’t know if this helped but I did it<br/> <code class="language-plaintext highlighter-rouge">ubuntu-drivers devices</code> &lt;- I first installed 545 but had an issue. So did<br/> <code class="language-plaintext highlighter-rouge">sudo apt autoremove nvidia* --purge</code> <code class="language-plaintext highlighter-rouge">sudo apt install nvidia-driver-545</code> <br/> <code class="language-plaintext highlighter-rouge">sudo reboot</code></p> <p>There’s also a method “Install NVIDIA Drivers using graphics-drivers/ppa on Ubuntu”</p> <p>Stick to using Ubuntu Repository if possible</p> <h2 id="apt-apt-get-aptitude">apt, apt-get, aptitude</h2> <p>Sometimes aptitude helps a lot.</p> <h2 id="be-cautious-when-updating-nvidia-driver-and-installing-nvidia-cuda-toolkit">Be cautious when updating nvidia driver and installing nvidia cuda toolkit</h2> <hr/> <h1 id="ssh">SSH</h1> <h2 id="brown-related-ssh">brown related ssh</h2> <p>There is a way to access Brown CS’s file system on CCV</p> <p><code class="language-plaintext highlighter-rouge">ssh brown</code> works because I have the following in Mac’s <code class="language-plaintext highlighter-rouge">~/.ssh/config</code><br/> <code class="language-plaintext highlighter-rouge">ssh jha38@ssh.cs.brown.edu</code> also works.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host brown
  HostName ssh.cs.brown.edu
  ForwardX11Trusted yes
  User jha38
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">/data/jhtlab</code> locates at Brown CS’s file system. After sshing into <code class="language-plaintext highlighter-rouge">brown</code>, do <code class="language-plaintext highlighter-rouge">cd ../../data/jhtlab/jha38</code><br/> to find my folder.</p> <p>James said there’s a way to access Brown CS’s file system (<code class="language-plaintext highlighter-rouge">/data/jhtlab/jha38</code>) on CCV (<code class="language-plaintext highlighter-rouge">ssh oscar</code>)</p> <hr/> <h2 id="ssh-key-pair">ssh key pair</h2> <p><a href="https://walkingplow.tistory.com/72">link</a><br/> I had an issue with sshing to hotcake / cake after regenerating ssh key pair.<br/> <code class="language-plaintext highlighter-rouge">ssh-copy-id -i ~/.ssh/id_rsa.pub jun@hotcake</code> this helped.<br/> This copy public ssh key to server’s <code class="language-plaintext highlighter-rouge">authorized_keys</code> folder which is located under server’s <code class="language-plaintext highlighter-rouge">~/.ssh</code>.<br/> After that, I can ssh into server just by <code class="language-plaintext highlighter-rouge">ssh hotcake</code> or <code class="language-plaintext highlighter-rouge">ssh cake</code>. For this, I guess I need to edit configure file <code class="language-plaintext highlighter-rouge">config</code> under Mac’s <code class="language-plaintext highlighter-rouge">~/.ssh</code>.<br/> For example,</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host cake
  HostName cake
  User junsukha
</code></pre></div></div> <h1 id="mlops">MLops</h1> <h2 id="basic-usage-of-psycopg">basic usage of psycopg</h2> <p><a href="https://www.psycopg.org/docs/usage.html#query-parameters">Basic module usage — Psycopg 2.9.9 documentation</a></p> <hr/> <h2 id="close-and-remove-a-container">close and remove a container</h2> <div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker stop "CONTAINTER ID"
docker rm "CONTAINER ID"
</code></pre></div></div> <p>Use <code class="language-plaintext highlighter-rouge">docker ps -a</code> to see all containers</p> <hr/> <h2 id="host-container">host, container</h2> <p><code class="language-plaintext highlighter-rouge">docker run -p 127.0.0.1:80:8080/tcp</code><br/> This means to bind port 8080 of the container to TCP port 80 on 127.0.0.1 of the host machine.</p> <hr/> <h2 id="any-installation-in-a-running-container-will-be-lost-as-soon-as-exiting-the-container">Any installation in a running container will be lost as soon as exiting the container</h2> <p><a href="https://stackoverflow.com/questions/63027514/install-package-in-running-docker-container">dockerfile - Install package in running docker container - Stack Overflow</a></p> <hr/> <h2 id="add-port-tunneling-between-mac-local-and-linux-remote-insidee-a-linux-remote-ie-i-ssh-into-linux-remote-from-mac-local">add port tunneling between mac (local) and linux (remote) insidee a linux (remote), i.e. I ssh into linux (remote) from mac (local)</h2> <p>press <code class="language-plaintext highlighter-rouge">shift</code> and <code class="language-plaintext highlighter-rouge">~</code> and <code class="language-plaintext highlighter-rouge">c</code>. Hold <code class="language-plaintext highlighter-rouge">shift</code> while hitting <code class="language-plaintext highlighter-rouge">~</code> and <code class="language-plaintext highlighter-rouge">c</code>.<br/> <code class="language-plaintext highlighter-rouge">-L 8888:hotcake:8888</code> : connect mac’s 8888 to hotcake’s (server) 8888.<br/> <a href="https://unix.stackexchange.com/questions/697825/add-port-forwarding-to-a-running-ssh-session">openssh - Add port forwarding to a running SSH session - Unix &amp; Linux Stack Exchange</a></p> <hr/> <h2 id="multiple-port-tunneling-when-ssh">multiple port tunneling when ssh</h2> <p><a href="https://stackoverflow.com/questions/29936948/ssh-l-forward-multiple-ports">ssh -L forward multiple ports - Stack Overflow</a></p> <hr/> <h2 id="how-to-find-a-docker-host-machines-ip-address-from-inside-a-container">how to find a docker host machine’s ip address from inside a container?</h2> <p><code class="language-plaintext highlighter-rouge">sudo ip addr show docker0</code> gives ip address of docker host machine (in my case 172.17.0.1)<br/> Also can identify ip address by <code class="language-plaintext highlighter-rouge">docker network inspect bridge</code><br/> Both commands above are run in hotcake (the machine sshed into)<br/> To see an ip address of a container, run <code class="language-plaintext highlighter-rouge">ip addr show eth0</code> inside a container.</p> <ul> <li>ex: <code class="language-plaintext highlighter-rouge">root@e77f6a1b3740:/# ip addr show eth0</code></li> </ul> <p><a href="https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach">nginx - From inside of a Docker container, how do I connect to the localhost of the machine? - Stack Overflow</a></p> <hr/> <h2 id="03-model-registry-2-save-model-to-registry">03. Model Registry 2) Save Model to Registry</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">MLFLOW_S3_ENDPOINT_URL</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://172.17.0.1:9005</span><span class="sh">"</span> <span class="c1"># when running in a container, should use host ip address instead of localhost?
</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">MLFLOW_TRACKING_URI</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://172.17.0.1:5001</span><span class="sh">"</span>
</code></pre></div></div> <p>Orignal version uses <code class="language-plaintext highlighter-rouge">"http://localhost:9005"</code> and <code class="language-plaintext highlighter-rouge">"http://localhost:5001"</code>. 9005 and 5001 are ports of Linux (remote machine) and are connected to 9091 and 9092 of mac (local) individually.</p> <hr/> <h2 id="how-to-debug-inside-a-container-with-vscode">How to debug inside a container with vscode</h2> <p>https://www.youtube.com/watch?v=w77D5KuJ7eE</p> <p>I think there are two ways: 1) access to a container with vscode from local (mac) 2) access to a conatiner with vscode from remote (linux); need to ssh from mac first</p> <p>Method 1): follow the video</p> <p>Method 2):</p> <ul> <li>Install <code class="language-plaintext highlighter-rouge">Remote Development</code> extension (I thought, for this method, the extension should be installed in linux machine but accessing container also works when the extension is installed on mac)</li> <li>click a bottom left button and select <code class="language-plaintext highlighter-rouge">access to running container</code></li> <li>choose a container (only currently running containers are visible)</li> </ul> <hr/> <h1 id="dl">DL</h1> <h1 id="c">c++</h1> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
 
<span class="k">class</span> <span class="nc">GfG</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
    <span class="n">GfG</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">x</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// static member function</span>
    <span class="c1">// static void printMsg() { cout &lt;&lt; "Welcome to GfG!" &lt;&lt; x; }</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">GfG</span><span class="o">::</span><span class="n">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// just like static member function</span>
 
<span class="c1">// main function</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">GfG</span> <span class="n">obj1</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">obj1</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">obj1</span><span class="p">.</span><span class="n">x</span><span class="o">++</span><span class="p">;</span>
    <span class="n">GfG</span> <span class="n">obj2</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">obj2</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

    <span class="c1">// invoking a static member function</span>
    <span class="c1">// GfG::printMsg();</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="pytorch-1">Pytorch</h1> <h2 id="torch-includes-cuda-toolkit">torch includes cuda toolkit</h2> <p>pytorch binary includes cuda toolkit. But it’s not a bad idea to match local cuda toolkit and torch cuda toolkit.</p> <p>keywords: pytorch binary, build from source</p> <hr/> <h2 id="cuda-related-issue-while-running-a-model">CUDA related issue while running a model</h2> <p>First thing to try is different versions; different python, pytorch, cuda versions.</p> <hr/> <h2 id="torch-20x-has-issue-with-cuda">torch 2.0.x has issue with cuda</h2> <p>Don’t use torch 2.0.x versions.</p> <hr/> <h1 id="etc">ETC</h1> <hr/>]]></content><author><name></name></author><category term="learning"/><category term="ssh"/><category term="tips"/><category term="ubuntu"/><category term="mlops"/><summary type="html"><![CDATA[what I learned from debugging]]></summary></entry><entry><title type="html">Ppo</title><link href="https://junsukha.github.io/blog/2024/ppo/" rel="alternate" type="text/html" title="Ppo"/><published>2024-01-15T00:00:00+00:00</published><updated>2024-01-15T00:00:00+00:00</updated><id>https://junsukha.github.io/blog/2024/ppo</id><content type="html" xml:base="https://junsukha.github.io/blog/2024/ppo/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">miscellaneous</title><link href="https://junsukha.github.io/blog/2023/etc/" rel="alternate" type="text/html" title="miscellaneous"/><published>2023-12-22T21:30:00+00:00</published><updated>2023-12-22T21:30:00+00:00</updated><id>https://junsukha.github.io/blog/2023/etc</id><content type="html" xml:base="https://junsukha.github.io/blog/2023/etc/"><![CDATA[<h2 id="setting-zsh-as-default-terminal-in-ssh-remote-linux-vscode-terminal">Setting zsh as default terminal in SSH remote linux vscode terminal</h2> <p><a href="https://stackoverflow.com/questions/55978281/how-do-i-configure-a-different-shell-for-a-vs-code-ssh-remote">link</a></p> <p>Add</p> <div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
    <span class="s2">"terminal.integrated.defaultProfile.linux"</span>: <span class="s2">"zsh"</span>,
<span class="o">}</span>
</code></pre></div></div> <p>to <code class="language-plaintext highlighter-rouge">Preferences: Open Remote Settings (SSH: hotcake)</code> using <code class="language-plaintext highlighter-rouge">cmd + shift + p</code></p> <p>If vscode doesn’t recognize <code class="language-plaintext highlighter-rouge">zsh</code>, install it first.</p> <hr/> <h2 id="git-branch-output-issue">git branch output issue</h2> <p><a href="https://stackoverflow.com/questions/68413744/my-integrated-vscode-terminal-zsh-opens-git-cli-when-i-type-in-git-branch">link</a></p> <p><code class="language-plaintext highlighter-rouge">git config --global pager.branch false</code></p> <hr/> <h2 id="jupyter-notebook-permission-denied-docker">jupyter notebook, permission denied, docker</h2> <p><a href="https://github.com/jupyter/docker-stacks/issues/1187">link</a></p> <hr/> <h2 id="clone-a-repo-from-someone-elses-github-and-push-it-to-a-repo-on-my-github">Clone a repo from someone else’s Github and push it to a repo on my Github</h2> <p><a href="https://stackoverflow.com/questions/18200248/cloning-a-repo-from-someone-elses-github-and-pushing-it-to-a-repo-on-my-github/44076938#44076938">link1</a></p> <p><a href="https://www.studytonight.com/git-guide/git-origin-master">link2</a></p> <ul> <li> <p><code class="language-plaintext highlighter-rouge">git remote add origin &lt;remote repo address&gt;</code> : origin이란 이름의 <code class="language-plaintext highlighter-rouge">&lt;remote repo address&gt;</code> 나타내는 remote을 새로 만듬<br/> <code class="language-plaintext highlighter-rouge">error: remote origin already exists</code> : git clone 하면 remote이름이 default로 origin이라서 이미 있는듯</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">git remote -v</code><br/> <code class="language-plaintext highlighter-rouge">origin &lt;...&gt; (fetch)</code><br/> <code class="language-plaintext highlighter-rouge">origin &lt;...&gt; (push)</code></p> </li> <li><code class="language-plaintext highlighter-rouge">git remote rename origin upstream</code> : 기존의 origin을 upstream으로 이름 바꿈</li> <li><code class="language-plaintext highlighter-rouge">git remote add origin &lt;repo on github&gt;</code> : 여기의 origin은 github에서 새로만든 repo를 나타냄 <code class="language-plaintext highlighter-rouge">&lt;repo on github&gt;</code> 은 내 github에서 new repo 만든거</li> </ul> <p>(위 두 단계 기존의 origin을 upstream 으로 바꾸고 다시 새로운 origin을 내 new repo on my Github으로 바꾸는 거임.<br/> 이 방법 대신에 <br/> <code class="language-plaintext highlighter-rouge">git remote set-url orign &lt;repo on my Github&gt;</code> 을 써서 upstream을 만드는 대신에 origin이 가리키고 있는 remote repo 주소를 바꿈)</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git remote
origin
upstream
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">git checkout -b origin</code> : create a branch “origin” (branch “main”은 이미 있던듯) <br/> 따라서 현재 local repo에 branch가 “origin”, “main” 두 개</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git branch
main
<span class="k">*</span> origin
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">git checkout main</code></li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git branch
<span class="k">*</span> main
origin
</code></pre></div></div> <p>Note. <code class="language-plaintext highlighter-rouge">Your branch is up to date with 'origin/main'</code> : 여기서 ‘origin/main’은 remote tracking branch 인데<br/> 결국 orignal denotes remote name and master denote the remote branch it is tracking.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/origin-master-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/origin-master-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/origin-master-1400.webp"/> <img src="/assets/img/origin-master.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="git-checkout--b-branch_name-vs-git-branch-branch_name"><code class="language-plaintext highlighter-rouge">git checkout -b &lt;branch_name&gt;</code> vs <code class="language-plaintext highlighter-rouge">git branch &lt;branch_name&gt;</code></h2> <p><code class="language-plaintext highlighter-rouge">git checkout -b &lt;branch_name&gt;</code>: creates a new branch and checks out (switch to) the new branch <code class="language-plaintext highlighter-rouge">git branch &lt;branch_name&gt;</code>: creates a new branch but leaves you on the same branch <code class="language-plaintext highlighter-rouge">git checkout &lt;branch_name&gt;</code>: check out (switches to) a new branch (copy from remote)</p> <p>Note that if you were on master branch and run git branch new_branch, both master and new_branch now point to the same commit.</p> <p>There are more: <code class="language-plaintext highlighter-rouge">git switch -c new_branch</code>, <code class="language-plaintext highlighter-rouge">git switch</code>, etc</p> <hr/>]]></content><author><name></name></author><category term="learning"/><summary type="html"><![CDATA[stuff I learned]]></summary></entry><entry><title type="html">Editing personal website</title><link href="https://junsukha.github.io/blog/2023/website/" rel="alternate" type="text/html" title="Editing personal website"/><published>2023-12-22T20:00:00+00:00</published><updated>2023-12-22T20:00:00+00:00</updated><id>https://junsukha.github.io/blog/2023/website</id><content type="html" xml:base="https://junsukha.github.io/blog/2023/website/"><![CDATA[<h2 id="toggle-latest-posts-news-selected-publications">toggle “latest posts”, “news”, “selected publications”</h2> <p>_pages/Go to about.md and update</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>news: false
latest_posts: false
selected_papers: false
</code></pre></div></div> <h2 id="change-the-number-of-posts-seen-on-a-page">change the number of posts seen on a page</h2> <p><code class="language-plaintext highlighter-rouge">per_page</code> in <code class="language-plaintext highlighter-rouge">index.html</code></p>]]></content><author><name></name></author><category term="learning"/><category term="personal-website"/><summary type="html"><![CDATA[How to edit personal website]]></summary></entry><entry><title type="html">mac os tips</title><link href="https://junsukha.github.io/blog/2023/mac-tips/" rel="alternate" type="text/html" title="mac os tips"/><published>2023-12-22T20:00:00+00:00</published><updated>2023-12-22T20:00:00+00:00</updated><id>https://junsukha.github.io/blog/2023/mac-tips</id><content type="html" xml:base="https://junsukha.github.io/blog/2023/mac-tips/"><![CDATA[<h2 id="homebrew-tips">homebrew tips</h2> <p>Manage packages using homebrew</p> <p><a href="https://velog.io/@franc/Homebrew%EB%A1%9C-%EB%82%98%EB%A7%8C%EC%9D%98-Mac-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0">link</a></p> <hr/> <h2 id="minize-windows-into-application-icon-or-not">minize windows into application icon or not</h2> <p>settings -&gt; Desktops &amp; Dock -&gt; Minimize windows into application icon</p> <hr/> <h2 id="show-desktop">Show Desktop</h2> <p><code class="language-plaintext highlighter-rouge">fn + h</code></p> <hr/> <h2 id="keyboard-shortcut-to-open-new-tab-next-to-current-tab-in-google-chrome">Keyboard shortcut to open new tab next to current tab in Google Chrome</h2> <p><a href="https://superuser.com/questions/1103354/keyboard-shortcut-to-open-new-tab-next-to-current-tab-in-google-chrome">link</a> I use <code class="language-plaintext highlighter-rouge">cmd+shift+t</code> for New Tab, <code class="language-plaintext highlighter-rouge">cmd+t</code> for New Tab to the right.</p> <hr/>]]></content><author><name></name></author><category term="mac"/><category term="tips"/><summary type="html"><![CDATA[tips for building your own mac]]></summary></entry><entry><title type="html">SSH issue</title><link href="https://junsukha.github.io/blog/2023/ssh/" rel="alternate" type="text/html" title="SSH issue"/><published>2023-12-22T18:23:00+00:00</published><updated>2023-12-22T18:23:00+00:00</updated><id>https://junsukha.github.io/blog/2023/ssh</id><content type="html" xml:base="https://junsukha.github.io/blog/2023/ssh/"><![CDATA[<h1 id="access-to-a-container-in-local-from-host-dont-confuse-with-localhostubuntu-host-is-my-mac-local-or-localhost-is-ubuntu">Access to a container in local from host (Don’t confuse with localhost(Ubuntu). host is my mac. local or localhost is Ubuntu)</h1> <p>Run from iterm (mac)</p> <p><code class="language-plaintext highlighter-rouge">ssh -L 9090:localhost:8000 jun@hotcake</code></p> <p>=&gt; mac’s 9090 port is tunneled to localhost (hotcake) 8000 port</p> <p>Run from hotcake<br/> <code class="language-plaintext highlighter-rouge">docker run -d --name api-server -p 8000:8000 part5-api-server</code></p> <p>=&gt; localhost (hotcake) port 8000 is connected to container’s 8000 port.</p> <p>Access to</p> <p><a href="http://localhost:9090/docs">link</a></p> <p>from mac.</p> <p>Use this for <a href="mlops-for-mle.github.io">1) MLflow Setup ML Engineer를 위한 MLOps</a></p> <p><code class="language-plaintext highlighter-rouge">ssh -L 9091:localhost:5001 jun@hotcake</code></p> <hr/> <h2 id="how-to-find-which-pid-is-using-which-port">How to find which PID is using which port?</h2> <p><code class="language-plaintext highlighter-rouge">lsof -i:&lt;port&gt;</code><br/> ex) <code class="language-plaintext highlighter-rouge">lsof -i :8000</code></p> <hr/> <h2 id="history-command">History command</h2> <p>Use <code class="language-plaintext highlighter-rouge">history</code> to see previous commands I used in a terminal</p> <hr/> <h2 id="cat-procdrivernvidiaversion">cat /proc/driver/nvidia/version</h2> <p>Show current driver version (NVRM) nvidia-smi shows NVML library version</p> <hr/> <h2 id="sudo-apt-purge-autoremove-nvidia-nvidiai386">sudo apt purge –autoremove ‘<em>nvidia</em>’ ‘<em>nvidia</em>:i386’</h2> <p>Remove nvidia packages</p> <hr/> <h2 id="installing-nvidia-driver-the-one-you-see-when-nvidia-smi">Installing nvidia driver (the one you see when <code class="language-plaintext highlighter-rouge">nvidia-smi</code>)</h2> <p>install the specific driver you want<br/> <code class="language-plaintext highlighter-rouge">sudo apt install nvidia-driver-510</code></p> <p>To check which is the recommended driver for your Nvidia card run:<br/> <code class="language-plaintext highlighter-rouge">ubuntu-drivers devices</code></p> <p>If you want to install the driver automatically, run :<br/> <code class="language-plaintext highlighter-rouge">sudo ubuntu-drivers autoinstall</code></p> <p>If you want to install a specific driver version #(410, 440…), run:<br/> <code class="language-plaintext highlighter-rouge">sudo apt install nvidia-&lt;driver number&gt;</code></p> <hr/> <h1 id="show-current-version">Show current version</h1> <p>cat /proc/driver/nvidia/version</p> <hr/>]]></content><author><name></name></author><category term="learning"/><category term="ssh"/><summary type="html"><![CDATA[how to access localhost in a machine I sshed into]]></summary></entry><entry><title type="html">MLops</title><link href="https://junsukha.github.io/blog/2023/MLops/" rel="alternate" type="text/html" title="MLops"/><published>2023-12-22T17:17:00+00:00</published><updated>2023-12-22T17:17:00+00:00</updated><id>https://junsukha.github.io/blog/2023/MLops</id><content type="html" xml:base="https://junsukha.github.io/blog/2023/MLops/"><![CDATA[<h2 id="basic-usage-of-psycopg">basic usage of psycopg</h2> <p><a href="https://www.psycopg.org/docs/usage.html#query-parameters">Basic module usage — Psycopg 2.9.9 documentation</a></p> <hr/> <h2 id="close-and-remove-a-container">close and remove a container</h2> <div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker stop "CONTAINTER ID"
docker rm "CONTAINER ID"
</code></pre></div></div> <p>Use <code class="language-plaintext highlighter-rouge">docker ps -a</code> to see all containers</p> <hr/> <h2 id="host-container">host, container</h2> <p><code class="language-plaintext highlighter-rouge">docker run -p 127.0.0.1:80:8080/tcp</code><br/> This means to bind port 8080 of the container to TCP port 80 on 127.0.0.1 of the host machine.</p> <hr/> <h2 id="any-installation-in-a-running-container-will-be-lost-as-soon-as-exiting-the-container">Any installation in a running container will be lost as soon as exiting the container</h2> <p><a href="https://stackoverflow.com/questions/63027514/install-package-in-running-docker-container">dockerfile - Install package in running docker container - Stack Overflow</a></p> <hr/> <h2 id="add-port-tunneling-between-mac-local-and-linux-remote-insidee-a-linux-remote-ie-i-ssh-into-linux-remote-from-mac-local">add port tunneling between mac (local) and linux (remote) insidee a linux (remote), i.e. I ssh into linux (remote) from mac (local)</h2> <p>press <code class="language-plaintext highlighter-rouge">shift</code> and <code class="language-plaintext highlighter-rouge">~</code> and <code class="language-plaintext highlighter-rouge">c</code>. Hold <code class="language-plaintext highlighter-rouge">shift</code> while hitting <code class="language-plaintext highlighter-rouge">~</code> and <code class="language-plaintext highlighter-rouge">c</code>.<br/> <code class="language-plaintext highlighter-rouge">-L 8888:hotcake:8888</code> : connect mac’s 8888 to hotcake’s (server) 8888.<br/> <a href="https://unix.stackexchange.com/questions/697825/add-port-forwarding-to-a-running-ssh-session">openssh - Add port forwarding to a running SSH session - Unix &amp; Linux Stack Exchange</a></p> <hr/> <h2 id="multiple-port-tunneling-when-ssh">multiple port tunneling when ssh</h2> <p><a href="https://stackoverflow.com/questions/29936948/ssh-l-forward-multiple-ports">ssh -L forward multiple ports - Stack Overflow</a></p> <hr/> <h2 id="how-to-find-a-docker-host-machines-ip-address-from-inside-a-container">how to find a docker host machine’s ip address from inside a container?</h2> <p><code class="language-plaintext highlighter-rouge">sudo ip addr show docker0</code> gives ip address of docker host machine (in my case 172.17.0.1)<br/> Also can identify ip address by <code class="language-plaintext highlighter-rouge">docker network inspect bridge</code><br/> Both commands above are run in hotcake (the machine sshed into)<br/> To see an ip address of a container, run <code class="language-plaintext highlighter-rouge">ip addr show eth0</code> inside a container.</p> <ul> <li>ex: <code class="language-plaintext highlighter-rouge">root@e77f6a1b3740:/# ip addr show eth0</code></li> </ul> <p><a href="https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach">nginx - From inside of a Docker container, how do I connect to the localhost of the machine? - Stack Overflow</a></p> <hr/> <h2 id="03-model-registry-2-save-model-to-registry">03. Model Registry 2) Save Model to Registry</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">MLFLOW_S3_ENDPOINT_URL</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://172.17.0.1:9005</span><span class="sh">"</span> <span class="c1"># when running in a container, should use host ip address instead of localhost?
</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">MLFLOW_TRACKING_URI</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://172.17.0.1:5001</span><span class="sh">"</span>
</code></pre></div></div> <p>Orignal version uses <code class="language-plaintext highlighter-rouge">"http://localhost:9005"</code> and <code class="language-plaintext highlighter-rouge">"http://localhost:5001"</code>. 9005 and 5001 are ports of Linux (remote machine) and are connected to 9091 and 9092 of mac (local) individually.</p> <hr/> <h2 id="how-to-debug-inside-a-container-with-vscode">How to debug inside a container with vscode</h2> <p>https://www.youtube.com/watch?v=w77D5KuJ7eE</p> <p>I think there are two ways: 1) access to a container with vscode from local (mac) (<em>Note: local = localhost = mac. host = Ubuntu). 2) access to a conatiner with vscode from remote (linux); need to ssh from mac first (</em>Note: remote = host. remote is used in the context of ssh whereas host is Docker context).</p> <p>Method 1): follow the video</p> <p>Method 2):</p> <ul> <li>Install <code class="language-plaintext highlighter-rouge">Remote Development</code> extension (I thought, for this method, the extension should be installed in linux machine but accessing container also works when the extension is installed on mac)</li> <li>click a bottom left button and select <code class="language-plaintext highlighter-rouge">access to running container</code></li> <li>choose a container (only currently running containers are visible)</li> </ul> <hr/> <h2 id="pushing-to-a-repo-that-i-cloned-from-someone-elses">Pushing to a repo that I cloned from someone else’s</h2> <p>https://stackoverflow.com/questions/18200248/cloning-a-repo-from-someone-elses-github-and-pushing-it-to-a-repo-on-my-github</p> <ol> <li>Create a new repository at http://github.com (don’t initialize README, .gitignore, license)</li> <li>Clone a repo of someone else’s to my local machine<br/> git clone</li> </ol>]]></content><author><name></name></author><category term="learning"/><category term="MLops"/><summary type="html"><![CDATA[Everything I learned about MLops]]></summary></entry><entry><title type="html">a post with TikZJax</title><link href="https://junsukha.github.io/blog/2023/tikzjax/" rel="alternate" type="text/html" title="a post with TikZJax"/><published>2023-12-12T22:25:00+00:00</published><updated>2023-12-12T22:25:00+00:00</updated><id>https://junsukha.github.io/blog/2023/tikzjax</id><content type="html" xml:base="https://junsukha.github.io/blog/2023/tikzjax/"><![CDATA[<p>This is an example post with TikZ code. TikZJax converts script tags (containing TikZ code) into SVGs.</p> <script type="text/tikz">
\begin{tikzpicture}
    \draw[red,fill=black!60!red] (0,0) circle [radius=1.5];
    \draw[green,fill=black!60!green] (0,0) circle [x radius=1.5cm, y radius=10mm];
    \draw[blue,fill=black!60!blue] (0,0) circle [x radius=1cm, y radius=5mm, rotate=30];
\end{tikzpicture}
</script>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included TikZ code could look like]]></summary></entry></feed>